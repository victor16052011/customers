// Generated by CoffeeScript 1.10.0
(function() {
  describe('td.object', function() {
    describe('making a test double object based on a Prototypal thing', function() {
      Given(function() {
        var Thing;
        return this.someType = Thing = (function() {
          function Thing() {}

          Thing.prototype.foo = function() {};

          Thing.prototype.bar = function() {};

          return Thing;

        })();
      });
      Given(function() {
        return this.testDouble = td.object(this.someType);
      });
      When(function() {
        return td.when(this.testDouble.bar()).thenReturn('yay');
      });
      Then(function() {
        return this.testDouble.bar() === 'yay';
      });
      And(function() {
        return this.testDouble.toString() === '[test double object for "Thing"]';
      });
      return And(function() {
        return this.testDouble.foo.toString() === '[test double for "Thing#foo"]';
      });
    });
    describe('making a test double based on a plain object funcbag', function() {
      Given(function() {
        return this.funcBag = {
          lol: function() {},
          kek: function() {},
          now: function() {},
          otherThing: 8
        };
      });
      Given(function() {
        return this.testDouble = td.object(this.funcBag);
      });
      When(function() {
        return td.when(this.testDouble.kek()).thenReturn('nay!');
      });
      Then(function() {
        return this.testDouble.kek() === 'nay!';
      });
      And(function() {
        return this.testDouble.toString() === '[test double object]';
      });
      And(function() {
        return this.testDouble.now.toString() === '[test double for ".now"]';
      });
      return And(function() {
        return this.testDouble.otherThing === 8;
      });
    });
    describe('making a test double based on an array of strings', function() {
      Given(function() {
        return this.testDouble = td.object(['biz', 'bam', 'boo']);
      });
      When(function() {
        return td.when(this.testDouble.biz()).thenReturn('zing!');
      });
      Then(function() {
        return this.testDouble.biz() === 'zing!';
      });
      And(function() {
        return this.testDouble.toString() === '[test double object]';
      });
      return And(function() {
        return this.testDouble.bam.toString() === '[test double for ".bam"]';
      });
    });
    if (global.Proxy != null) {
      return describe('creating a proxy object (ES2015; only supported in FF + Edge atm)', function() {
        Given(function() {
          return this.testDouble = td.object('Thing');
        });
        Given(function() {
          return this.testDouble.magic('sauce');
        });
        When(function() {
          return td.when(this.testDouble.whateverYouWant()).thenReturn('YESS');
        });
        Then(function() {
          return td.verify(this.testDouble.magic('sauce'));
        });
        And(function() {
          return this.testDouble.whateverYouWant() === 'YESS';
        });
        And(function() {
          return this.testDouble.toString() === '[test double object for "Thing"]';
        });
        And(function() {
          return this.testDouble.foo.toString() === '[test double for "Thing#foo"]';
        });
        context('with custom excludeMethods definitions', function() {
          Given(function() {
            return this.testDouble = td.object('Stuff', {
              excludeMethods: ['then', 'fun']
            });
          });
          return Then(function() {
            return this.testDouble.fun === void 0;
          });
        });
        return context('unnamed double', function() {
          Given(function() {
            return this.testDouble = td.object();
          });
          Then(function() {
            return this.testDouble.toString() === '[test double object]';
          });
          return Then(function() {
            return this.testDouble.lol.toString() === '[test double for "#lol"]';
          });
        });
      });
    }
  });

}).call(this);
